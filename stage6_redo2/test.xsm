

MOV BP, 4096
MOV SP, BP
MOV R0 , 0
PUSH R0
PUSH R0
PUSH R0

JMP :-101

:0  ; function func 
PUSH BP 	 	;pushing BP
MOV BP , SP 	;now sp and bp are the same
MOV R0, 0 ;pushing space for local variables
PUSH R0
MOV R0, 0 ;pushing space for local variables
PUSH R0
MOV R0, 0 ;pushing space for local variables
PUSH R0
MOV R0 , 4096 ;retreieving normal var
MOV R1 , 5
MOV [R0] , R1 ; Storing Operation to globone
MOV R0 , 0
ADD R0 , 1
ADD R0, BP ;retreiving LOCAL VAR
MOV R1 , 0
SUB R1 , 3
ADD R1, BP ;retrieving parameter
MOV [R0] , [R1] ; Storing Operation to locthree
MOV R0 , 4
MOV R1 , BP
SUB R1 , 3
MOV [R1], R0
JMP :1
:1
POP R0 ;poping localvar
POP R0 ;poping localvar
POP R0 ;poping localvar
POP BP ;poping old bp to the new bp
RET ;returning to where sp is

:-101  ; function main 

PUSH BP 	 	;pushing BP
MOV BP , SP 	;now sp and bp are the same

MOV R0, 0 ;pushing space for local variables
PUSH R0
MOV R0, 0 ;pushing space for local variables
PUSH R0

MOV R0 , 0
ADD R0 , 1
ADD R0, BP ;retreiving LOCAL VAR

MOV R1 , 10
MOV [R0] , R1 ; Storing Operation to locone
MOV R0 , 0
ADD R0 , 2

ADD R0, BP ;retreiving LOCAL VAR
PUSH R0 ; saving all registers
PUSH R1 ; saving all registers
PUSH R2 ; saving all registers
PUSH R3 ; saving all registers
PUSH R4 ; saving all registers
PUSH R5 ; saving all registers
PUSH R6 ; saving all registers
PUSH R7 ; saving all registers
PUSH R8 ; saving all registers
PUSH R9 ; saving all registers
PUSH R10 ; saving all registers
MOV R1 , 10
PUSH R1;pushing the argument 10
MOV R1 , 0 
PUSH R1 ;for storing a return value
CALL :0
POP R1 ;pop return value into register
POP R2 ;pop all arguments
POP R10 ;pop register back0
POP R9 ;pop register back0
POP R8 ;pop register back0
POP R7 ;pop register back0
POP R6 ;pop register back0
POP R5 ;pop register back0
POP R4 ;pop register back0
POP R3 ;pop register back0
POP R2 ;pop register back0
POP R0 ;pop register back0
MOV [R0] , R1 ; Storing Operation to loctwo
:-102
POP R0 ;poping localvar
JMP :END ;jumping to die
